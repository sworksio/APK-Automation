name: Generate APK

on:
  release:
    types: [published]

jobs:
  generate-debug-apk:
    name: Generate Debug APK
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, 'QA') }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Setup Java 11 Environment
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Update Permission for gradle
        run: chmod +x gradlew

      - name: Build APK
        run: ./gradlew clean assembleQa

#      - name: Upload to release asset
#        uses: sworksio/APK-Automation@main
#        id: attach_to_release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
#        with:
#          args: "app/build/outputs/apk/qa/*.apk"
#
#      - name: Get the version
#        id: get_version
#        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      #      - name: Print Tag
      #        run: echo ${{ steps.get_version.outputs.VERSION }}

#      - name: Send a message to Microsoft Teams
#        uses: aliencube/microsoft-teams-actions@v0.8.0
#        with:
#          webhook_uri: ${{ secrets.TEAM_CHANNEL_WEBHOOK_URL }}
#          title: QA Build
#          summary: summary
#          text: "${{ steps.attach_to_release.outputs.url }}${{ steps.get_version.outputs.VERSION }}/${{ steps.attach_to_release.outputs.file_name }} "

      - name: Send mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: "parth.sworks@gmail.com"
          password: "Sworks@2798"
          subject: ${{ secrets.APP_NAME }}
          to: Parth - sWorks PM & Team <e3d4a0bc.sworks.io@in.teams.ms>
          from: Parth <parth.sworks@gmail.com>
          body: Build job of ${{ secrets.APP_NAME }} completed successfully!
          ignore_cert: true
          convert_markdown: true
          attachments: app/build/outputs/apk/qa/*.apk
          priority: low

  generate-release-Bundle:
    #    name: Generate Release APK
    name: Generate Release Bundle
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, 'QA') == false }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Setup Java 11 Environment
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Update Permission for gradle
        run: chmod +x gradlew

      #      - name: Build APK
      #        run: ./gradlew clean assembleRelease
      - name: Build Bundle
        run: ./gradlew clean :app:bundleRelease

      - name: Upload to release asset
        uses: sworksio/APK-Automation@main
        id: attach_to_release
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        with:
          #          args: "app/build/outputs/apk/release/*.apk"
          args: "app/build/outputs/bundle/release/*.aab"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      #      - name: Print Tag
      #        run: echo ${{ steps.get_version.outputs.VERSION }}

      - name: Send a message to Microsoft Teams
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAM_CHANNEL_WEBHOOK_URL }}
          title: Release Bundle
          summary: summary
          text: "${{ steps.attach_to_release.outputs.url }}${{ steps.get_version.outputs.VERSION }}/${{ steps.attach_to_release.outputs.file_name }} "

      - name: Upload bundle in play store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: app/play_store_user.json
          packageName: ${{ secrets.APP_PACKAGE_NAME }}
          releaseFiles: app/build/outputs/bundle/release/*.aab
          track: internal
          whatsNewDirectory: app/whatsNewDirectory/
          inAppUpdatePriority: 2
          status: completed






#   mappingFile: app/build/outputs/mapping/release/mapping.txt
#   track: alpha, beta, internal, production, internalsharing
#   userFraction: 0.33

#  - uses: FranzDiebold/github-env-vars-action@v2
#
#  - name: Print environment variables
#    run: |
#      echo "github:  ${{ github.ref }}"
#      echo "CI_REPOSITORY_SLUG=$CI_REPOSITORY_SLUG"
#      echo "CI_REPOSITORY_OWNER=$CI_REPOSITORY_OWNER"
#      echo "CI_REPOSITORY_OWNER_SLUG=$CI_REPOSITORY_OWNER_SLUG"
#      echo "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME"
#      echo "CI_REPOSITORY_NAME_SLUG=$CI_REPOSITORY_NAME_SLUG"
#      echo "CI_REPOSITORY=$CI_REPOSITORY"
#      echo "CI_REF_SLUG=$CI_REF_SLUG"
#      echo "CI_ACTION_REF_NAME=$CI_ACTION_REF_NAME"
#      echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
#      echo "CI_REF_NAME=$CI_REF_NAME"
#      echo "CI_REF_NAME_SLUG=$CI_REF_NAME_SLUG"
#      echo "CI_REF=$CI_REF"
#      echo "CI_HEAD_REF_SLUG=$CI_HEAD_REF_SLUG"
#      echo "CI_HEAD_REF=$CI_HEAD_REF"
#      echo "CI_BASE_REF_SLUG=$CI_BASE_REF_SLUG"
#      echo "CI_BASE_REF=$CI_BASE_REF"
#      echo "CI_SHA_SHORT=$CI_SHA_SHORT"
#      echo "CI_SHA=$CI_SHA"
#      echo "CI_ACTOR=$CI_ACTOR"
#      echo "CI_EVENT_NAME=$CI_EVENT_NAME"
#      echo "CI_RUN_ID=$CI_RUN_ID"
#      echo "CI_RUN_NUMBER=$CI_RUN_NUMBER"
#      echo "CI_WORKFLOW=$CI_WORKFLOW"
#      echo "CI_ACTION=$CI_ACTION"